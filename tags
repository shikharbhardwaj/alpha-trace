!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BASE_FLAGS	cfg/ycm_extra_conf.py	/^BASE_FLAGS = [$/;"	v
BUFFERS_ALPHA_HPP	include/buffers_alpha.hpp	14;"	d
CAMERA_ALPHA_HPP	include/camera_alpha.hpp	15;"	d
COLOURS	include/colours.hpp	2;"	d
Camera	include/camera_alpha.hpp	/^    Camera(uint32_t width, uint32_t height, float fa_w, float fa_h,$/;"	f	class:alpha::Camera
Camera	include/camera_alpha.hpp	/^class Camera {$/;"	c	namespace:alpha
Fbuf	include/rasteriser_alpha.hpp	/^    std::unique_ptr<Framebuffer> Fbuf;$/;"	m	class:alpha::Rasteriser
Fill	include/camera_alpha.hpp	/^enum class fit_resolution_gate { Fill = 0, Overscan };$/;"	m	class:alpha::fit_resolution_gate
Fill	spike/code/pinhole.cpp	/^enum class fit_resolution_gate { Fill = 0, Overscan };$/;"	m	class:fit_resolution_gate	file:
FindNearest	cfg/ycm_extra_conf.py	/^def FindNearest(path, target):$/;"	f
FitResolutionGate	spike/code/raster3d.cpp	/^enum FitResolutionGate { kFill = 0, kOverscan };$/;"	g	file:
FlagsForClangComplete	cfg/ycm_extra_conf.py	/^def FlagsForClangComplete(root):$/;"	f
FlagsForCompilationDatabase	cfg/ycm_extra_conf.py	/^def FlagsForCompilationDatabase(root, filename):$/;"	f
FlagsForFile	cfg/ycm_extra_conf.py	/^def FlagsForFile(filename):$/;"	f
FlagsForInclude	cfg/ycm_extra_conf.py	/^def FlagsForInclude(root):$/;"	f
Framebuffer	include/buffers_alpha.hpp	/^    Framebuffer(uint32_t w, uint32_t h, int space)$/;"	f	class:Framebuffer
Framebuffer	include/buffers_alpha.hpp	/^class Framebuffer {$/;"	c
G	spike/code/aek.cpp	/^i G[] = {247570, 280596, 280600, 249748, 18578, 18577, 231184, 16, 16};$/;"	v
GetCompilationInfoForFile	cfg/ycm_extra_conf.py	/^def GetCompilationInfoForFile(database, filename):$/;"	f
HEADER_EXTENSIONS	cfg/ycm_extra_conf.py	/^HEADER_EXTENSIONS = [$/;"	v
H_PRETTY_PRINT	thirdparty/prettyprint.hpp	12;"	d
Int	thirdparty/prettyprint.hpp	/^    template <std::size_t I> struct Int {};$/;"	s	struct:pretty_print::print_container_helper::printer
InvSqrt	spike/bench/sqrt_comp.cpp	/^float InvSqrt(float x) {$/;"	f
IsHeaderFile	cfg/ycm_extra_conf.py	/^def IsHeaderFile(filename):$/;"	f
MATH_ALPHA_HPP	include/math_alpha.hpp	15;"	d
MakeRelativePathsInFlagsAbsolute	cfg/ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute(flags, working_directory):$/;"	f
Matrix44	include/math_alpha.hpp	/^    Matrix44() {}$/;"	f	class:alpha::math::Matrix44
Matrix44	include/math_alpha.hpp	/^    Matrix44(std::initializer_list<std::initializer_list<T>> xs) {$/;"	f	class:alpha::math::Matrix44
Matrix44	include/math_alpha.hpp	/^template <typename T> class Matrix44 {$/;"	c	namespace:alpha::math
Matrix44	spike/code/geometry.h	/^    Matrix44() {}$/;"	f	class:Matrix44
Matrix44	spike/code/geometry.h	/^    Matrix44(T a, T b, T c, T d, T e, T f, T g, T h, T i, T j, T k, T l, T m,$/;"	f	class:Matrix44
Matrix44	spike/code/geometry.h	/^template <typename T> class Matrix44 {$/;"	c
Matrix44f	include/math_alpha.hpp	/^typedef Matrix44<float> Matrix44f;$/;"	t	namespace:alpha::math
Matrix44f	spike/code/geometry.h	/^typedef Matrix44<float> Matrix44f;$/;"	t
NONIUS_RUNNER	spike/bench/rasteriser.cpp	2;"	d	file:
NONIUS_RUNNER	spike/bench/sqrt_comp.cpp	1;"	d	file:
R	spike/code/aek.cpp	/^f R() { return (f)rand() \/ RAND_MAX; }$/;"	f
RASTERISER_ALPHA_HPP	include/rasteriser_alpha.hpp	14;"	d
Rasteriser	include/rasteriser_alpha.hpp	/^    Rasteriser(std::shared_ptr<Camera> cam_inst, int col_space = 255) {$/;"	f	class:alpha::Rasteriser
Rasteriser	include/rasteriser_alpha.hpp	/^class Rasteriser {$/;"	c	namespace:alpha
S	spike/code/aek.cpp	/^v S(v o, v d) {$/;"	f
SOURCE_EXTENSIONS	cfg/ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [$/;"	v
T	spike/code/aek.cpp	/^i T(v o, v d, f &t, v &n) {$/;"	f
Vec2	include/math_alpha.hpp	/^    Vec2() : x(0), y(0) {}$/;"	f	class:alpha::math::Vec2
Vec2	include/math_alpha.hpp	/^    Vec2(T xx) : x(xx), y(xx) {}$/;"	f	class:alpha::math::Vec2
Vec2	include/math_alpha.hpp	/^    Vec2(T xx, T yy) : x(xx), y(yy) {}$/;"	f	class:alpha::math::Vec2
Vec2	include/math_alpha.hpp	/^template <typename T> class Vec2 {$/;"	c	namespace:alpha::math
Vec2	spike/code/geometry.h	/^    Vec2() : x(0), y(0) {}$/;"	f	class:Vec2
Vec2	spike/code/geometry.h	/^    Vec2(T xx) : x(xx), y(xx) {}$/;"	f	class:Vec2
Vec2	spike/code/geometry.h	/^    Vec2(T xx, T yy) : x(xx), y(yy) {}$/;"	f	class:Vec2
Vec2	spike/code/geometry.h	/^template <typename T> class Vec2 {$/;"	c
Vec2f	include/math_alpha.hpp	/^typedef Vec2<float> Vec2f;$/;"	t	namespace:alpha::math
Vec2f	spike/code/geometry.h	/^typedef Vec2<float> Vec2f;$/;"	t
Vec2i	include/math_alpha.hpp	/^typedef Vec2<int> Vec2i;$/;"	t	namespace:alpha::math
Vec2i	spike/code/geometry.h	/^typedef Vec2<int> Vec2i;$/;"	t
Vec3	include/math_alpha.hpp	/^    Vec3() : x(0), y(0), z(0) {}$/;"	f	class:alpha::math::Vec3
Vec3	include/math_alpha.hpp	/^    Vec3(T xx) : x(xx), y(xx), z(xx) {}$/;"	f	class:alpha::math::Vec3
Vec3	include/math_alpha.hpp	/^    Vec3(T xx, T yy, T zz) : x(xx), y(yy), z(zz) {}$/;"	f	class:alpha::math::Vec3
Vec3	include/math_alpha.hpp	/^template <typename T> class Vec3 {$/;"	c	namespace:alpha::math
Vec3	spike/code/geometry.h	/^    Vec3() : x(T(0)), y(T(0)), z(T(0)) {}$/;"	f	class:Vec3
Vec3	spike/code/geometry.h	/^    Vec3(T xx) : x(xx), y(xx), z(xx) {}$/;"	f	class:Vec3
Vec3	spike/code/geometry.h	/^    Vec3(T xx, T yy, T zz) : x(xx), y(yy), z(zz) {}$/;"	f	class:Vec3
Vec3	spike/code/geometry.h	/^template <typename T> class Vec3 {$/;"	c
Vec3f	include/math_alpha.hpp	/^typedef Vec3<float> Vec3f;$/;"	t	namespace:alpha::math
Vec3f	spike/code/geometry.h	/^typedef Vec3<float> Vec3f;$/;"	t
Vec3i	include/math_alpha.hpp	/^typedef Vec3<int> Vec3i;$/;"	t	namespace:alpha::math
Vec3i	spike/code/geometry.h	/^typedef Vec3<int> Vec3i;$/;"	t
Zbuf	include/rasteriser_alpha.hpp	/^    std::unique_ptr<Zbuffer> Zbuf;$/;"	m	class:alpha::Rasteriser
Zbuffer	include/buffers_alpha.hpp	/^    Zbuffer(uint8_t w, uint32_t h, float far) : width(w), height(h) {$/;"	f	class:Zbuffer
Zbuffer	include/buffers_alpha.hpp	/^class Zbuffer {$/;"	c
_array	thirdparty/prettyprint.hpp	/^    const T *const _array;$/;"	m	struct:pretty_print::array_wrapper_n
_n	thirdparty/prettyprint.hpp	/^    size_t _n;$/;"	m	struct:pretty_print::array_wrapper_n
alpha	include/camera_alpha.hpp	/^namespace alpha {$/;"	n
alpha	include/math_alpha.hpp	/^namespace alpha {$/;"	n
alpha	include/rasteriser_alpha.hpp	/^namespace alpha {$/;"	n
array_wrapper_n	thirdparty/prettyprint.hpp	/^    array_wrapper_n(const T *const a, size_t n) : _array(a), _n(n) {}$/;"	f	struct:pretty_print::array_wrapper_n
array_wrapper_n	thirdparty/prettyprint.hpp	/^template <typename T> struct array_wrapper_n {$/;"	s	namespace:pretty_print
base	thirdparty/prettyprint.hpp	/^    std::unique_ptr<custom_delims_base> base;$/;"	m	struct:pretty_print::custom_delims
beg_value	thirdparty/prettyprint.hpp	/^    static bool const beg_value = sizeof(f<T>(nullptr)) == sizeof(yes);$/;"	m	struct:pretty_print::detail::has_begin_end
begin	thirdparty/prettyprint.hpp	/^    const_iterator begin() const { return m_map.cbegin(n); }$/;"	f	struct:pretty_print::bucket_print_wrapper
begin	thirdparty/prettyprint.hpp	/^    inline const_iterator begin() const { return _array; }$/;"	f	struct:pretty_print::array_wrapper_n
bottom	include/camera_alpha.hpp	/^    float top, bottom, left, right;$/;"	m	class:alpha::Camera
bucket_print	thirdparty/prettyprint.hpp	/^pretty_print::bucket_print_wrapper<T> bucket_print(const T &m,$/;"	f
bucket_print_wrapper	thirdparty/prettyprint.hpp	/^    bucket_print_wrapper(const T &m, size_type bucket) : m_map(m), n(bucket) {}$/;"	f	struct:pretty_print::bucket_print_wrapper
bucket_print_wrapper	thirdparty/prettyprint.hpp	/^template <typename T> struct bucket_print_wrapper {$/;"	s	namespace:pretty_print
buffer	include/buffers_alpha.hpp	/^    std::vector<std::vector<uint8_t>> buffer;$/;"	m	class:Framebuffer
cam	include/rasteriser_alpha.hpp	/^    std::shared_ptr<Camera> cam;$/;"	m	class:alpha::Rasteriser
col_space	include/buffers_alpha.hpp	/^    int col_space;$/;"	m	class:Framebuffer
colours	include/colours.hpp	/^namespace colours {$/;"	n
compose_rotation	spike/code/decompose.m	/^function R = compose_rotation(x, y, z)$/;"	f
computePixelCoordinates	spike/code/perspproj.cpp	/^void computePixelCoordinates(const Vec3f &p_world, Vec2i &p_raster,$/;"	f
computeScreenCoordinates	spike/code/raster3d.cpp	/^void computeScreenCoordinates(const float &filmApertureWidth,$/;"	f
compute_screen_coordinates	include/camera_alpha.hpp	/^    void compute_screen_coordinates() {$/;"	f	class:alpha::Camera
const_iterator	thirdparty/prettyprint.hpp	/^    typedef const T *const_iterator;$/;"	t	struct:pretty_print::array_wrapper_n
const_iterator	thirdparty/prettyprint.hpp	/^    typedef typename T::const_local_iterator const_iterator;$/;"	t	struct:pretty_print::bucket_print_wrapper
container_	thirdparty/prettyprint.hpp	/^    const T &container_;$/;"	m	struct:pretty_print::print_container_helper
convertToRaster	spike/code/raster3d.cpp	/^void convertToRaster(const Vec3f &vertexWorld, const Matrix44f &worldToCamera,$/;"	f
convert_to_raster	include/camera_alpha.hpp	/^    void convert_to_raster(const Vec3f &v_world, Vec3f &raster) {$/;"	f	class:alpha::Camera
crossProduct	spike/code/geometry.h	/^    Vec3 crossProduct(const Vec3<T> &v) const {$/;"	f	class:Vec3
cross_product	include/math_alpha.hpp	/^    Vec2 cross_product(const Vec2<T> &v) const {$/;"	f	class:alpha::math::Vec2
cross_product	include/math_alpha.hpp	/^    Vec3 cross_product(const Vec3<T> &v) const {$/;"	f	class:alpha::math::Vec3
custom_delims	thirdparty/prettyprint.hpp	/^    custom_delims(const Container &c)$/;"	f	struct:pretty_print::custom_delims
custom_delims	thirdparty/prettyprint.hpp	/^template <typename Delims> struct custom_delims {$/;"	s	namespace:pretty_print
custom_delims_base	thirdparty/prettyprint.hpp	/^struct custom_delims_base {$/;"	s	namespace:pretty_print
custom_delims_wrapper	thirdparty/prettyprint.hpp	/^    custom_delims_wrapper(const T &t_) : t(t_) {}$/;"	f	struct:pretty_print::custom_delims_wrapper
custom_delims_wrapper	thirdparty/prettyprint.hpp	/^struct custom_delims_wrapper : custom_delims_base {$/;"	s	namespace:pretty_print
decompose_rotation	spike/code/decompose.m	/^function [x,y,z] = decompose_rotation(R)$/;"	f
delimiter	thirdparty/prettyprint.hpp	/^    const char_type *delimiter;$/;"	m	struct:pretty_print::delimiters_values
delimiters	thirdparty/prettyprint.hpp	/^struct delimiters<::std::multiset<T, TComp, TAllocator>, char> {$/;"	s	namespace:pretty_print
delimiters	thirdparty/prettyprint.hpp	/^struct delimiters<::std::multiset<T, TComp, TAllocator>, wchar_t> {$/;"	s	namespace:pretty_print
delimiters	thirdparty/prettyprint.hpp	/^struct delimiters<::std::pair<T1, T2>, wchar_t> {$/;"	s	namespace:pretty_print
delimiters	thirdparty/prettyprint.hpp	/^struct delimiters<::std::set<T, TComp, TAllocator>, char> {$/;"	s	namespace:pretty_print
delimiters	thirdparty/prettyprint.hpp	/^struct delimiters<::std::set<T, TComp, TAllocator>, wchar_t> {$/;"	s	namespace:pretty_print
delimiters	thirdparty/prettyprint.hpp	/^struct delimiters<::std::unordered_multiset<T, THash, TEqual, TAllocator>,$/;"	s	namespace:pretty_print
delimiters	thirdparty/prettyprint.hpp	/^struct delimiters<::std::unordered_set<T, THash, TEqual, TAllocator>, char> {$/;"	s	namespace:pretty_print
delimiters	thirdparty/prettyprint.hpp	/^struct delimiters<::std::unordered_set<T, THash, TEqual, TAllocator>, wchar_t> {$/;"	s	namespace:pretty_print
delimiters	thirdparty/prettyprint.hpp	/^template <typename T, typename TChar> struct delimiters {$/;"	s	namespace:pretty_print
delimiters	thirdparty/prettyprint.hpp	/^template <typename T1, typename T2> struct delimiters<std::pair<T1, T2>, char> {$/;"	s	namespace:pretty_print
delimiters	thirdparty/prettyprint.hpp	/^template <typename T> struct delimiters<T, char> {$/;"	s	namespace:pretty_print
delimiters	thirdparty/prettyprint.hpp	/^template <typename T> struct delimiters<T, wchar_t> {$/;"	s	namespace:pretty_print
delimiters	thirdparty/prettyprint.hpp	/^template <typename... Args> struct delimiters<::std::tuple<Args...>, wchar_t> {$/;"	s	namespace:pretty_print
delimiters	thirdparty/prettyprint.hpp	/^template <typename... Args> struct delimiters<std::tuple<Args...>, char> {$/;"	s	namespace:pretty_print
delimiters_values	thirdparty/prettyprint.hpp	/^template <typename TChar> struct delimiters_values {$/;"	s	namespace:pretty_print
depth_buffer	include/buffers_alpha.hpp	/^    std::vector<float> depth_buffer;$/;"	m	class:Zbuffer
detail	thirdparty/prettyprint.hpp	/^namespace detail {$/;"	n	namespace:pretty_print
dotProduct	spike/code/geometry.h	/^    T dotProduct(const Vec3<T> &v) const { return x * v.x + y * v.y + z * v.z; }$/;"	f	class:Vec3
dot_product	include/math_alpha.hpp	/^    T dot_product(const Vec2<T> &v) const { return x * v.x + y * v.y; }$/;"	f	class:alpha::math::Vec2
dot_product	include/math_alpha.hpp	/^    T dot_product(const Vec3<T> &v) const {$/;"	f	class:alpha::math::Vec3
draw_triangle	include/rasteriser_alpha.hpp	/^    void draw_triangle(const Point &v0, const Point &v1, const Point &v2) {$/;"	f	class:alpha::Rasteriser
dump_as_ppm	include/buffers_alpha.hpp	/^    void dump_as_ppm(const std::string &name) {$/;"	f	class:Framebuffer
dump_as_ppm	include/rasteriser_alpha.hpp	/^    void dump_as_ppm(const std::string &name) { Fbuf->dump_as_ppm(name); }$/;"	f	class:alpha::Rasteriser
edgeFunction	spike/code/raster3d.cpp	/^float edgeFunction(const Vec3f &a, const Vec3f &b, const Vec3f &c) {$/;"	f
edge_function	include/math_alpha.hpp	/^inline float edge_function(const Vec3f &a, const Vec3f &b, const Vec3f &c) {$/;"	f	namespace:alpha::math
end	thirdparty/prettyprint.hpp	/^    const_iterator end() const { return m_map.cend(n); }$/;"	f	struct:pretty_print::bucket_print_wrapper
end	thirdparty/prettyprint.hpp	/^    inline const_iterator end() const { return _array + _n; }$/;"	f	struct:pretty_print::array_wrapper_n
end_value	thirdparty/prettyprint.hpp	/^    static bool const end_value = sizeof(g<T>(nullptr)) == sizeof(yes);$/;"	m	struct:pretty_print::detail::has_begin_end
expected	test/math_alpha_test.cpp	/^void expected(float a, float b) {$/;"	f
f	spike/code/aek.cpp	/^typedef float f;$/;"	t	file:
fail	test/math_alpha_test.cpp	/^bool fail = false;$/;"	v
farClippingPLane	spike/code/raster3d.cpp	/^const float farClippingPLane = 1000;$/;"	v
far_clipping_plain	include/camera_alpha.hpp	/^    float near_clipping_plain, far_clipping_plain;$/;"	m	class:alpha::Camera
far_clipping_plain	include/rasteriser_alpha.hpp	/^    float far_clipping_plain;$/;"	m	class:alpha::Rasteriser
far_clipping_plain	spike/code/canvas_cords.cpp	/^float far_clipping_plain = 1000;$/;"	v
filmApertureHeight	spike/code/raster3d.cpp	/^float filmApertureHeight = 0.735;$/;"	v
filmApertureWidth	spike/code/raster3d.cpp	/^float filmApertureWidth = 0.980;$/;"	v
film_aperture_height	include/camera_alpha.hpp	/^    float film_aperture_width, film_aperture_height;$/;"	m	class:alpha::Camera
film_aperture_height	spike/code/canvas_cords.cpp	/^float film_aperture_height = 0.735; \/\/ in$/;"	v
film_aperture_height	spike/code/pinhole.cpp	/^float film_aperture_height = 1.500;$/;"	v
film_aperture_width	include/camera_alpha.hpp	/^    float film_aperture_width, film_aperture_height;$/;"	m	class:alpha::Camera
film_aperture_width	spike/code/canvas_cords.cpp	/^float film_aperture_width = 0.980;  \/\/ in$/;"	v
film_aperture_width	spike/code/pinhole.cpp	/^float film_aperture_width = 1.995;$/;"	v
fit_film	spike/code/pinhole.cpp	/^fit_resolution_gate fit_film = fit_resolution_gate::Overscan;$/;"	v
fit_resolution_gate	include/camera_alpha.hpp	/^enum class fit_resolution_gate { Fill = 0, Overscan };$/;"	c	namespace:alpha
fit_resolution_gate	spike/code/pinhole.cpp	/^enum class fit_resolution_gate { Fill = 0, Overscan };$/;"	c	file:
fit_setting	include/camera_alpha.hpp	/^    fit_resolution_gate fit_setting;$/;"	m	class:alpha::Camera
focalLength	spike/code/raster3d.cpp	/^float focalLength = 20; \/\/ in mm$/;"	v
focal_length	include/camera_alpha.hpp	/^    float focal_length;$/;"	m	class:alpha::Camera
focal_length	spike/code/canvas_cords.cpp	/^float focal_length = 35;            \/\/ mm$/;"	v
focal_length	spike/code/pinhole.cpp	/^float focal_length = 35; \/\/ mm$/;"	v
get	include/buffers_alpha.hpp	/^    float get(uint32_t x, uint32_t y) { return depth_buffer[y * width + x]; }$/;"	f	class:Zbuffer
has_begin_end	thirdparty/prettyprint.hpp	/^template <typename T> struct has_begin_end : private sfinae_base {$/;"	s	namespace:pretty_print::detail
has_const_iterator	thirdparty/prettyprint.hpp	/^template <typename T> struct has_const_iterator : private sfinae_base {$/;"	s	namespace:pretty_print::detail
height	include/buffers_alpha.hpp	/^    uint32_t width, height;$/;"	m	class:Framebuffer
height	include/buffers_alpha.hpp	/^    uint32_t width, height;$/;"	m	class:Zbuffer
height	spike/bench/rasteriser.cpp	/^const int width = 512, height = 512;$/;"	v
help	src/alpha.cpp	/^void help() {$/;"	f
i	spike/code/aek.cpp	/^typedef int i;$/;"	t	file:
imageHeight	spike/code/raster3d.cpp	/^const uint32_t imageHeight = 480;$/;"	v
imageWidth	spike/code/raster3d.cpp	/^const uint32_t imageWidth = 640;$/;"	v
img_height	include/camera_alpha.hpp	/^    uint32_t img_width, img_height;$/;"	m	class:alpha::Camera
img_height	include/rasteriser_alpha.hpp	/^    int img_width, img_height;$/;"	m	class:alpha::Rasteriser
img_height	spike/code/pinhole.cpp	/^uint32_t img_height = 480;$/;"	v
img_width	include/camera_alpha.hpp	/^    uint32_t img_width, img_height;$/;"	m	class:alpha::Camera
img_width	include/rasteriser_alpha.hpp	/^    int img_width, img_height;$/;"	m	class:alpha::Rasteriser
img_width	spike/code/pinhole.cpp	/^uint32_t img_width = 640;$/;"	v
inchToMm	spike/code/raster3d.cpp	/^static const float inchToMm = 25.4;$/;"	v	file:
inch_to_mm	include/camera_alpha.hpp	/^    float inch_to_mm = 25.4f;$/;"	m	class:alpha::Camera
inch_to_mm	spike/code/canvas_cords.cpp	/^static const float inch_to_mm = 25.4;$/;"	v	file:
inch_to_mm	spike/code/pinhole.cpp	/^static const float inch_to_mm = 25.4;$/;"	v	file:
inverse	include/math_alpha.hpp	/^    Matrix44 inverse() {$/;"	f	class:alpha::math::Matrix44
inverse	spike/code/geometry.h	/^    Matrix44 inverse() const {$/;"	f	class:Matrix44
invert	include/math_alpha.hpp	/^    const Matrix44<T> &invert() {$/;"	f	class:alpha::math::Matrix44
invert	spike/code/geometry.h	/^    const Matrix44<T> &invert() {$/;"	f	class:Matrix44
is_container	thirdparty/prettyprint.hpp	/^struct is_container$/;"	s	namespace:pretty_print
is_container	thirdparty/prettyprint.hpp	/^struct is_container<T[N]> : std::true_type {};$/;"	s	namespace:pretty_print
is_container	thirdparty/prettyprint.hpp	/^struct is_container<std::pair<T1, T2>> : std::true_type {};$/;"	s	namespace:pretty_print
is_container	thirdparty/prettyprint.hpp	/^struct is_container<std::tuple<Args...>> : std::true_type {};$/;"	s	namespace:pretty_print
is_container	thirdparty/prettyprint.hpp	/^template <std::size_t N> struct is_container<char[N]> : std::false_type {};$/;"	s	namespace:pretty_print
is_container	thirdparty/prettyprint.hpp	/^template <typename T> struct is_container<std::valarray<T>> : std::true_type {};$/;"	s	namespace:pretty_print
is_equal	include/math_alpha.hpp	/^inline bool is_equal(float a, float b) {$/;"	f	namespace:alpha::math
kFill	spike/code/raster3d.cpp	/^enum FitResolutionGate { kFill = 0, kOverscan };$/;"	e	enum:FitResolutionGate	file:
kOverscan	spike/code/raster3d.cpp	/^enum FitResolutionGate { kFill = 0, kOverscan };$/;"	e	enum:FitResolutionGate	file:
left	include/camera_alpha.hpp	/^    float top, bottom, left, right;$/;"	m	class:alpha::Camera
length	include/math_alpha.hpp	/^    T length() const { return sqrt(norm()); }$/;"	f	class:alpha::math::Vec2
length	include/math_alpha.hpp	/^    T length() const { return sqrt(norm()); }$/;"	f	class:alpha::math::Vec3
length	spike/code/geometry.h	/^    T length() const { return sqrt(norm()); }$/;"	f	class:Vec3
m_map	thirdparty/prettyprint.hpp	/^    const T &m_map;$/;"	m	struct:pretty_print::bucket_print_wrapper
main	spike/bench/sse.cpp	/^int main(int argc, char **argv) {$/;"	f
main	spike/code/aek.cpp	/^i main() {$/;"	f
main	spike/code/canvas_cords.cpp	/^int main() {$/;"	f
main	spike/code/local_world.cpp	/^int main() {$/;"	f
main	spike/code/opengl.cpp	/^int main(int argc, char **argv) {$/;"	f
main	spike/code/perspproj.cpp	/^int main() {$/;"	f
main	spike/code/pinhole.cpp	/^int main() {$/;"	f
main	spike/code/projection.cpp	/^int main() {$/;"	f
main	spike/code/raster3d.cpp	/^int main() {$/;"	f
main	spike/code/rasterisation.cpp	/^int main() {$/;"	f
main	spike/code/sphere.cpp	/^int main() {$/;"	f
main	src/alpha.cpp	/^int main(int argc, char **argv) {$/;"	f
main	test/math_alpha_test.cpp	/^int main() {$/;"	f
math	include/math_alpha.hpp	/^namespace math {$/;"	n	namespace:alpha
max3	spike/code/raster3d.cpp	/^float max3(const float &a, const float &b, const float &c) {$/;"	f
max_3	include/math_alpha.hpp	/^inline float max_3(float a, float b, float c) {$/;"	f	namespace:alpha::math
min3	spike/code/raster3d.cpp	/^float min3(const float &a, const float &b, const float &c) {$/;"	f
min_3	include/math_alpha.hpp	/^inline float min_3(float a, float b, float c) {$/;"	f	namespace:alpha::math
multDirMatrix	spike/code/geometry.h	/^    void multDirMatrix(const Vec3<S> &src, Vec3<S> &dst) const {$/;"	f	class:Matrix44
multVecMatrix	spike/code/geometry.h	/^    void multVecMatrix(const Vec3<S> &src, Vec3<S> &dst) const {$/;"	f	class:Matrix44
mult_dir_matrix	include/math_alpha.hpp	/^    void mult_dir_matrix(const Vec3<S> &src, Vec3<S> &dst) const {$/;"	f	class:alpha::math::Matrix44
mult_vec_matrix	include/math_alpha.hpp	/^    void mult_vec_matrix(const Vec3<S> &src, Vec3<S> &dst) const {$/;"	f	class:alpha::math::Matrix44
multiply	include/math_alpha.hpp	/^    static void multiply(const Matrix44<T> &a, const Matrix44 &b, Matrix44 &c) {$/;"	f	class:alpha::math::Matrix44
multiply	spike/code/geometry.h	/^    static void multiply(const Matrix44<T> &a, const Matrix44 &b, Matrix44 &c) {$/;"	f	class:Matrix44
n	thirdparty/prettyprint.hpp	/^    const size_type n;$/;"	m	struct:pretty_print::bucket_print_wrapper
nearClippingPLane	spike/code/raster3d.cpp	/^const float nearClippingPLane = 1;$/;"	v
near_clipping_plain	include/camera_alpha.hpp	/^    float near_clipping_plain, far_clipping_plain;$/;"	m	class:alpha::Camera
near_clipping_plain	spike/code/canvas_cords.cpp	/^float near_clipping_plain = 0.1;$/;"	v
nok	test/math_alpha_test.cpp	/^void nok() { std::cout << colours::red << "ERROR ❌ " << colours::reset; }$/;"	f
norm	include/math_alpha.hpp	/^    T norm() const { return x * x + y * y + z * z; }$/;"	f	class:alpha::math::Vec3
norm	include/math_alpha.hpp	/^    T norm() const { return x * x + y * y; }$/;"	f	class:alpha::math::Vec2
norm	spike/code/geometry.h	/^    T norm() const { return x * x + y * y + z * z; }$/;"	f	class:Vec3
normal	spike/bench/sse.cpp	/^void normal(float *a, int N) {$/;"	f
normalize	include/math_alpha.hpp	/^    Vec2 &normalize() {$/;"	f	class:alpha::math::Vec2
normalize	include/math_alpha.hpp	/^    Vec3 &normalize() {$/;"	f	class:alpha::math::Vec3
normalize	spike/code/geometry.h	/^    Vec3 &normalize() {$/;"	f	class:Vec3
ntris	spike/code/raster3d.cpp	/^const uint32_t ntris = 3156;$/;"	v
numTris	spike/code/perspproj.cpp	/^const uint32_t numTris = 128;$/;"	v
num_tris	spike/code/pinhole.cpp	/^const uint32_t num_tris = 51;$/;"	v
nvertices	spike/code/cow.h	/^uint32_t nvertices[9468] = {$/;"	v
ok	test/math_alpha_test.cpp	/^void ok() { std::cout << colours::green << "OK ✓ " << colours::reset; }$/;"	f
operator !	spike/code/aek.cpp	/^    v operator!() { return *this * (1 \/ sqrt(*this % *this)); }$/;"	f	struct:v
operator %	spike/code/aek.cpp	/^    f operator%(v r) { return x * r.x + y * r.y + z * r.z; }$/;"	f	struct:v
operator ()	thirdparty/prettyprint.hpp	/^    inline void operator()(ostream_type &stream) const {$/;"	f	struct:pretty_print::print_container_helper
operator *	include/math_alpha.hpp	/^    Matrix44 operator*(const Matrix44 &v) const {$/;"	f	class:alpha::math::Matrix44
operator *	include/math_alpha.hpp	/^    Vec2 operator*(const T &r) const { return Vec2(x * r, y * r); }$/;"	f	class:alpha::math::Vec2
operator *	include/math_alpha.hpp	/^    Vec3 operator*(const T &r) const { return Vec3(x * r, y * r, z * r); }$/;"	f	class:alpha::math::Vec3
operator *	spike/code/aek.cpp	/^    v operator*(f r) { return v(x * r, y * r, z * r); }$/;"	f	struct:v
operator *	spike/code/geometry.h	/^    Matrix44 operator*(const Matrix44 &v) const {$/;"	f	class:Matrix44
operator *	spike/code/geometry.h	/^    Vec2 operator*(const T &r) const { return Vec2(x * r, y * r); }$/;"	f	class:Vec2
operator *	spike/code/geometry.h	/^    Vec3 operator*(const T &r) const { return Vec3(x * r, y * r, z * r); }$/;"	f	class:Vec3
operator *	spike/code/geometry.h	/^    Vec3 operator*(const Vec3 &v) const {$/;"	f	class:Vec3
operator *	spike/code/geometry.h	/^    friend Vec2 operator*(const T &r, const Vec2<T> &v) {$/;"	f	class:Vec2
operator *	spike/code/geometry.h	/^    friend Vec3 operator*(const T &r, const Vec3 &v) {$/;"	f	class:Vec3
operator *=	spike/code/geometry.h	/^    Vec2 &operator*=(const T &r) {$/;"	f	class:Vec2
operator *=	spike/code/geometry.h	/^    Vec3 &operator*=(const T &r) {$/;"	f	class:Vec3
operator +	include/math_alpha.hpp	/^    Vec2 operator+(const Vec2 &v) const { return Vec2(x + v.x, y + v.y); }$/;"	f	class:alpha::math::Vec2
operator +	include/math_alpha.hpp	/^    Vec3 operator+(const Vec3 &v) const {$/;"	f	class:alpha::math::Vec3
operator +	spike/code/aek.cpp	/^    v operator+(v r) { return v(x + r.x, y + r.y, z + r.z); }$/;"	f	struct:v
operator +	spike/code/geometry.h	/^    Vec2 operator+(const Vec2 &v) const { return Vec2(x + v.x, y + v.y); }$/;"	f	class:Vec2
operator +	spike/code/geometry.h	/^    Vec3 operator+(const Vec3 &v) const {$/;"	f	class:Vec3
operator -	include/math_alpha.hpp	/^    Vec2 operator-(const Vec2 &v) const { return Vec2(x - v.x, y - v.y); }$/;"	f	class:alpha::math::Vec2
operator -	include/math_alpha.hpp	/^    Vec3 operator-(const Vec3 &v) const {$/;"	f	class:alpha::math::Vec3
operator -	spike/code/geometry.h	/^    Vec3 operator-() const { return Vec3(-x, -y, -z); }$/;"	f	class:Vec3
operator -	spike/code/geometry.h	/^    Vec3 operator-(const Vec3 &v) const {$/;"	f	class:Vec3
operator /	spike/code/geometry.h	/^    Vec2 operator\/(const T &r) const { return Vec2(x \/ r, y \/ r); }$/;"	f	class:Vec2
operator /	spike/code/geometry.h	/^    friend Vec3 operator\/(const T &r, const Vec3 &v) {$/;"	f	class:Vec3
operator /=	spike/code/geometry.h	/^    Vec2 &operator\/=(const T &r) {$/;"	f	class:Vec2
operator /=	spike/code/geometry.h	/^    Vec3 &operator\/=(const T &r) {$/;"	f	class:Vec3
operator <<	include/math_alpha.hpp	/^    friend std::ostream &operator<<(std::ostream &s, const Matrix44 &m) {$/;"	f	class:alpha::math::Matrix44
operator <<	include/math_alpha.hpp	/^    friend std::ostream &operator<<(std::ostream &s, const Vec2<T> &v) {$/;"	f	class:alpha::math::Vec2
operator <<	include/math_alpha.hpp	/^    friend std::ostream &operator<<(std::ostream &s, const Vec3<T> &v) {$/;"	f	class:alpha::math::Vec3
operator <<	spike/code/geometry.h	/^    friend std::ostream &operator<<(std::ostream &s, const Matrix44 &m) {$/;"	f	class:Matrix44
operator <<	spike/code/geometry.h	/^    friend std::ostream &operator<<(std::ostream &s, const Vec2<T> &v) {$/;"	f	class:Vec2
operator <<	spike/code/geometry.h	/^    friend std::ostream &operator<<(std::ostream &s, const Vec3<T> &v) {$/;"	f	class:Vec3
operator <<	thirdparty/prettyprint.hpp	/^inline std::basic_ostream<TChar, TCharTraits> &operator<<($/;"	f	namespace:pretty_print
operator <<	thirdparty/prettyprint.hpp	/^operator<<(basic_ostream<TChar, TCharTraits> &stream, const T &container) {$/;"	f	namespace:std
operator <<	thirdparty/prettyprint.hpp	/^operator<<(std::basic_ostream<TChar, TCharTraits> &s,$/;"	f	namespace:pretty_print
operator ==	include/math_alpha.hpp	/^    bool operator==(const Matrix44 &lhs) {$/;"	f	class:alpha::math::Matrix44
operator []	include/math_alpha.hpp	/^    T &operator[](uint8_t i) { return (&x)[i]; }$/;"	f	class:alpha::math::Vec2
operator []	include/math_alpha.hpp	/^    T &operator[](uint8_t i) { return (&x)[i]; }$/;"	f	class:alpha::math::Vec3
operator []	include/math_alpha.hpp	/^    T *operator[](uint8_t i) { return x[i]; }$/;"	f	class:alpha::math::Matrix44
operator []	include/math_alpha.hpp	/^    const T &operator[](uint8_t i) const { return (&x)[i]; }$/;"	f	class:alpha::math::Vec2
operator []	include/math_alpha.hpp	/^    const T &operator[](uint8_t i) const { return (&x)[i]; }$/;"	f	class:alpha::math::Vec3
operator []	include/math_alpha.hpp	/^    const T *operator[](uint8_t i) const { return x[i]; }$/;"	f	class:alpha::math::Matrix44
operator []	spike/code/geometry.h	/^    T &operator[](uint8_t i) { return (&x)[i]; }$/;"	f	class:Vec3
operator []	spike/code/geometry.h	/^    T *operator[](uint8_t i) { return x[i]; }$/;"	f	class:Matrix44
operator []	spike/code/geometry.h	/^    const T &operator[](uint8_t i) const { return (&x)[i]; }$/;"	f	class:Vec3
operator []	spike/code/geometry.h	/^    const T *operator[](uint8_t i) const { return x[i]; }$/;"	f	class:Matrix44
operator ^	spike/code/aek.cpp	/^    v operator^(v r) {$/;"	f	struct:v
postfix	thirdparty/prettyprint.hpp	/^    const char_type *postfix;$/;"	m	struct:pretty_print::delimiters_values
prefix	thirdparty/prettyprint.hpp	/^    const char_type *prefix;$/;"	m	struct:pretty_print::delimiters_values
pretty_print	thirdparty/prettyprint.hpp	/^namespace pretty_print {$/;"	n
pretty_print_array	thirdparty/prettyprint.hpp	/^inline pretty_print::array_wrapper_n<T> pretty_print_array(const T *const a,$/;"	f
print_body	thirdparty/prettyprint.hpp	/^        static void print_body(const U &c, ostream_type &stream) {$/;"	f	struct:pretty_print::print_container_helper::printer
print_body	thirdparty/prettyprint.hpp	/^    static void print_body(const element_type &c, ostream_type &stream) {$/;"	f	struct:pretty_print::print_container_helper::printer
print_body	thirdparty/prettyprint.hpp	/^    static void print_body(const std::pair<T1, T2> &c, ostream_type &stream) {$/;"	f	struct:pretty_print::print_container_helper::printer
print_container_helper	thirdparty/prettyprint.hpp	/^    print_container_helper(const T &container) : container_(container) {}$/;"	f	struct:pretty_print::print_container_helper
print_container_helper	thirdparty/prettyprint.hpp	/^struct print_container_helper {$/;"	s	namespace:pretty_print
printer	thirdparty/prettyprint.hpp	/^                              TDelimiters>::printer<std::pair<T1, T2>> {$/;"	s	class:pretty_print::print_container_helper
printer	thirdparty/prettyprint.hpp	/^                              TDelimiters>::printer<std::tuple<Args...>> {$/;"	s	class:pretty_print::print_container_helper
printer	thirdparty/prettyprint.hpp	/^    template <typename U> struct printer {$/;"	s	struct:pretty_print::print_container_helper
rd	test/math_alpha_test.cpp	/^std::random_device rd;$/;"	v
right	include/camera_alpha.hpp	/^    float top, bottom, left, right;$/;"	m	class:alpha::Camera
rotation_matrix_demo	spike/code/decompose.m	/^function rotation_matrix_demo$/;"	f
set	include/buffers_alpha.hpp	/^    void set(uint32_t x, uint32_t y, float z) {$/;"	f	class:Zbuffer
set	include/buffers_alpha.hpp	/^    void set(uint32_t x, uint32_t y, uint8_t r, uint8_t g, uint8_t b) {$/;"	f	class:Framebuffer
sfinae_base	thirdparty/prettyprint.hpp	/^struct sfinae_base {$/;"	s	namespace:pretty_print::detail
size_type	thirdparty/prettyprint.hpp	/^    typedef typename T::size_type size_type;$/;"	t	struct:pretty_print::bucket_print_wrapper
sse	spike/bench/sse.cpp	/^void sse(float *a, int N) {$/;"	f
st	spike/code/cow.h	/^Vec2f st[3056] = {$/;"	v
std	thirdparty/prettyprint.hpp	/^namespace std {$/;"	n
stindices	spike/code/cow.h	/^uint32_t stindices[9468] = {$/;"	v
stream	thirdparty/prettyprint.hpp	/^    std::ostream &stream(std::ostream &s) {$/;"	f	struct:pretty_print::custom_delims_wrapper
stream	thirdparty/prettyprint.hpp	/^    std::wostream &stream(std::wostream &s) {$/;"	f	struct:pretty_print::custom_delims_wrapper
t	thirdparty/prettyprint.hpp	/^    const T &t;$/;"	m	struct:pretty_print::custom_delims_wrapper
top	include/camera_alpha.hpp	/^    float top, bottom, left, right;$/;"	m	class:alpha::Camera
transpose	include/math_alpha.hpp	/^    Matrix44 &transpose() {$/;"	f	class:alpha::math::Matrix44
transpose	spike/code/geometry.h	/^    Matrix44 &transpose() {$/;"	f	class:Matrix44
transposed	include/math_alpha.hpp	/^    Matrix44 transposed() const {$/;"	f	class:alpha::math::Matrix44
transposed	spike/code/geometry.h	/^    Matrix44 transposed() const {$/;"	f	class:Matrix44
tris	spike/code/perspproj.cpp	/^const uint32_t tris[numTris * 3] = {$/;"	v
tris	spike/code/pinhole.cpp	/^const uint32_t tris[num_tris * 3] = {$/;"	v
tuple_print	thirdparty/prettyprint.hpp	/^    static void tuple_print(const element_type &, ostream_type &,$/;"	f	struct:pretty_print::print_container_helper::printer
tuple_print	thirdparty/prettyprint.hpp	/^    static void tuple_print(const element_type &c, ostream_type &stream,$/;"	f	struct:pretty_print::print_container_helper::printer
tuple_print	thirdparty/prettyprint.hpp	/^    tuple_print(const element_type &c, ostream_type &stream,$/;"	f	struct:pretty_print::print_container_helper::printer
v	spike/code/aek.cpp	/^    v() {}$/;"	f	struct:v
v	spike/code/aek.cpp	/^    } v(f a, f b, f c) {$/;"	f	struct:v
v	spike/code/aek.cpp	/^struct v {$/;"	s	file:
v0	spike/bench/rasteriser.cpp	/^alpha::Vec2i v0 = {width, height};$/;"	v
v1	spike/bench/rasteriser.cpp	/^alpha::Vec2i v1 = {0, 0};$/;"	v
v2	spike/bench/rasteriser.cpp	/^alpha::Vec2i v2 = {width + 3, 0};$/;"	v
value	thirdparty/prettyprint.hpp	/^    static const bool value = sizeof(test<T>(nullptr)) == sizeof(yes);$/;"	m	struct:pretty_print::detail::has_const_iterator
value_type	thirdparty/prettyprint.hpp	/^    typedef T value_type;$/;"	t	struct:pretty_print::array_wrapper_n
values	thirdparty/prettyprint.hpp	/^                                            wchar_t>::values = {L"{", L", ",$/;"	m	class:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^                                         char>::values = {"{", ", ", "}"};$/;"	m	class:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^               wchar_t>::values = {L"{", L", ", L"}"};$/;"	m	class:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^    ::std::unordered_multiset<T, THash, TEqual, TAllocator>, char>::values = {$/;"	m	class:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^    ::std::unordered_set<T, THash, TEqual, TAllocator>, char>::values = {$/;"	m	class:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^    ::std::unordered_set<T, THash, TEqual, TAllocator>, wchar_t>::values = {$/;"	m	class:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^    delimiters<::std::multiset<T, TComp, TAllocator>, wchar_t>::values = {$/;"	m	class:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^    delimiters<::std::pair<T1, T2>, wchar_t>::values = {L"(", L", ", L")"};$/;"	m	class:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^    delimiters<::std::tuple<Args...>, wchar_t>::values = {L"(", L", ", L")"};$/;"	m	class:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^    static const delimiters_values<char> values;$/;"	m	struct:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^    static const delimiters_values<wchar_t> values;$/;"	m	struct:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^    static const type values;$/;"	m	struct:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^const delimiters_values<char> delimiters<T, char>::values = {"[", ", ", "]"};$/;"	m	class:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^const delimiters_values<char> delimiters<std::pair<T1, T2>, char>::values = {$/;"	m	class:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^const delimiters_values<char> delimiters<std::tuple<Args...>, char>::values = {$/;"	m	class:pretty_print::delimiters
values	thirdparty/prettyprint.hpp	/^const delimiters_values<wchar_t> delimiters<T, wchar_t>::values = {L"[", L", ",$/;"	m	class:pretty_print::delimiters
vertices	spike/code/cow.h	/^Vec3f vertices[1732] = {$/;"	v
verts	spike/code/perspproj.cpp	/^const Vec3f verts[146] = {{0, 39.034, 0},$/;"	v
verts	spike/code/pinhole.cpp	/^const alpha::Vec3f verts[146] = {{-2.5703, 0.78053, -2.4e-05},$/;"	v
width	include/buffers_alpha.hpp	/^    uint32_t width, height;$/;"	m	class:Framebuffer
width	include/buffers_alpha.hpp	/^    uint32_t width, height;$/;"	m	class:Zbuffer
width	spike/bench/rasteriser.cpp	/^const int width = 512, height = 512;$/;"	v
worldToCamera	spike/code/raster3d.cpp	/^const Matrix44f worldToCamera = {$/;"	v
world_to_cam	include/camera_alpha.hpp	/^    Matrix44f world_to_cam;$/;"	m	class:alpha::Camera
x	include/math_alpha.hpp	/^    T x, y, z;$/;"	m	class:alpha::math::Vec3
x	include/math_alpha.hpp	/^    T x, y;$/;"	m	class:alpha::math::Vec2
x	include/math_alpha.hpp	/^    T x[4][4] = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}};$/;"	m	class:alpha::math::Matrix44
x	spike/code/aek.cpp	/^    f x, y, z;$/;"	m	struct:v	file:
x	spike/code/geometry.h	/^    T x, y, z;$/;"	m	class:Vec3
x	spike/code/geometry.h	/^    T x, y;$/;"	m	class:Vec2
x	spike/code/geometry.h	/^    T x[4][4] = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}};$/;"	m	class:Matrix44
y	include/math_alpha.hpp	/^    T x, y, z;$/;"	m	class:alpha::math::Vec3
y	include/math_alpha.hpp	/^    T x, y;$/;"	m	class:alpha::math::Vec2
y	spike/code/aek.cpp	/^    f x, y, z;$/;"	m	struct:v	file:
y	spike/code/geometry.h	/^    T x, y, z;$/;"	m	class:Vec3
y	spike/code/geometry.h	/^    T x, y;$/;"	m	class:Vec2
z	include/math_alpha.hpp	/^    T x, y, z;$/;"	m	class:alpha::math::Vec3
z	spike/code/aek.cpp	/^    f x, y, z;$/;"	m	struct:v	file:
z	spike/code/geometry.h	/^    T x, y, z;$/;"	m	class:Vec3
z_far	spike/code/pinhole.cpp	/^float z_far = 1000;$/;"	v
z_near	spike/code/pinhole.cpp	/^float z_near = 0.1;$/;"	v
~custom_delims_base	thirdparty/prettyprint.hpp	/^    virtual ~custom_delims_base() {}$/;"	f	struct:pretty_print::custom_delims_base
